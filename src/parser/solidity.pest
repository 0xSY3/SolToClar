WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
basic_type = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
type_name = { mapping_type | basic_type }
literal = @{ number | string | boolean }
number = @{ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean = @{ "true" | "false" }

// Contract structure
file = { SOI ~ contract_declaration+ ~ EOI }
contract_declaration = { "contract" ~ identifier ~ "{" ~ contract_body ~ "}" }
contract_body = { (state_variable_declaration | function_definition | event_definition)* }

// Modifiers
visibility_modifier = { "public" | "private" | "internal" | "external" }
state_mutability_modifier = { "pure" | "view" | "payable" }
constant_modifier = { "constant" }

// State variables
state_variable_declaration = {
    mapping_state_variable_declaration |
    basic_state_variable_declaration
}

basic_state_variable_declaration = { 
    basic_type ~ visibility_modifier? ~ constant_modifier? ~ identifier ~ ("=" ~ expression)? ~ ";"
}

mapping_state_variable_declaration = {
    mapping_type ~ visibility_modifier? ~ constant_modifier? ~ identifier ~ ";"
}

// Mapping types
mapping_type = { 
    "mapping" ~ "(" ~ basic_type ~ "=>" ~ type_name ~ ")"
}

// Functions
function_definition = {
    constructor_definition |
    regular_function_definition
}

constructor_definition = {
    "constructor" ~ "(" ~ parameter_list? ~ ")" ~ visibility_modifier? ~ function_body
}

regular_function_definition = {
    "function" ~ identifier ~ 
    "(" ~ parameter_list? ~ ")" ~
    visibility_modifier? ~
    state_mutability_modifier? ~
    ("returns" ~ "(" ~ type_name ~ ")")? ~
    function_body
}

parameter_list = { parameter ~ ("," ~ parameter)* }
parameter = { type_name ~ identifier }

// Events
event_definition = { "event" ~ identifier ~ "(" ~ event_parameter_list? ~ ")" ~ ";" }
event_parameter_list = { event_parameter ~ ("," ~ event_parameter)* }
event_parameter = { type_name ~ indexed_modifier? ~ identifier }
indexed_modifier = { "indexed" }

// Function body and statements
function_body = { "{" ~ statement* ~ "}" }

statement = _{
    assignment_statement |
    return_statement |
    emit_statement |
    expression_statement
}

assignment_statement = { index_access ~ "=" ~ expression ~ ";" }
return_statement = { "return" ~ expression? ~ ";" }
emit_statement = { "emit" ~ identifier ~ "(" ~ argument_list? ~ ")" ~ ";" }
expression_statement = { expression ~ ";" }

// Expressions
argument_list = { expression ~ ("," ~ expression)* }
expression = { term ~ (operator ~ term)* }
term = _{ primary | "(" ~ expression ~ ")" }
primary = { index_access | member_access | literal }
index_access = { member_access ~ ("[" ~ expression ~ "]")* }
member_access = { identifier ~ ("." ~ identifier)* }
operator = { "+" | "-" | "*" | "/" | "=" }